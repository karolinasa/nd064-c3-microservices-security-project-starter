Docker Threat Modeling
Spoofing - Client traffic to docker daemon or docker registry could be spoofed if TLS is not used.
Tampering - TLS CA certificate file should be protected from  modification of unprivileged users as it may affect communication security.
Repudiation - A user may make changes to the docker daemon that are not correct, that may lead to repudiation.
Information Disclosure - Sensitive data may be left in container images that could be exposed.
Denial of Service - A container may use all available memory to run on the host - memory limit should be specified when running the container.
Elevation of Privilege - Docker client usage on the administrator's machine may be compromised as the attacker may gain access to it. 

Kubernetes Threat Modeling
Spoofing - The connection between the API server and kubelet may be spoofed. The connection should be encrypted. 
Tampering - Configuration of etcd may be modified by an attacker. Permissions to etcd files should be restricted.
Repudiation - Certificate should be revoked when necessary as Kubernetes by default doesn't allow certificate revocation, which may allow repudiation.
Information Disclosure - Sensitive information may be disclosed in etcd through key-value pairs. This information should be encrypted.
Denial of Service - No memory limit set on Kubernetes may cause an exhaustion of resources when running the pod. Memory limit should be set.
Elevation of Privilege - --privileged flag could be used that affects kube-apiserver as the container process is launched without any further 
security checks. The usage of this flag should be avoided.

Docker-bench run results and analysis
Remediated these weaknesses:
1. [FAIL] 2.2 Ensure network traffic is restricted between containers on the default bridge (Automated)
By default, unrestricted network traffic is enabled between all containers on the same host
on the default network bridge. Thus, each container has the potential of reading all packets
across the container network on the same host. This might lead to an unintended and
unwanted disclosure of information to other containers. Hence, restrict inter-container
communication on the default network bridge.

2. [FAIL] 2.16 Ensure Userland Proxy is Disabled (Automated)
The Docker engine provides two mechanisms for forwarding ports from the host to
containers, hairpin NAT, and the use of a userland proxy. In most circumstances, the
hairpin NAT mode is preferred as it improves performance and makes use of native Linux
iptables functionality instead of using an additional component.

Where hairpin NAT is available, the userland proxy should be disabled on startup to reduce
the attack surface of the installation.

3. [FAIL] 4.5 Ensure Content trust for Docker is Enabled (Automated)
Content trust provides the ability to use digital signatures for data sent to and received
from remote Docker registries. These signatures allow client-side verification of the
identity and the publisher of specific image tags and ensures the provenance of container
images.

Reference - CIS Docker Benchmark v1.2.0
